%
%   Example 1: usage of exportToPPTX with blank presentation
%


%% Start new presentation
isOpen  = exportToPPTX();
if ~isempty(isOpen),
    % If PowerPoint already started, then close first and then open a new one
    exportToPPTX('close');
end

exportToPPTX('new','Dimensions',[12 6], ...
    'Title','Example Presentation', ...
    'Author','MatLab', ...
    'Subject','Automatically generated PPTX file', ...
    'Comments','This file has been automatically generated by exportToPPTX');

% Additionally background color for all slides can be set as follows:
% exportToPPTX('new','BackgroundColor',[0.5 0.5 0.5]);


%% Add some slides
figH = figure('Renderer','zbuffer'); mesh(peaks); view(0,0);

for islide=1:5,
    slideNum = exportToPPTX('addslide');
    fprintf('Added slide %d\n',slideNum);
    exportToPPTX('addpicture',figH);
    exportToPPTX('addtext',sprintf('Slide Number %d',slideNum));
    exportToPPTX('addnote',sprintf('Notes data: slide number %d',slideNum));
    
    % Rotate mesh on each slide
    view(18*islide,18*islide);
end
close(figH);


%% Check current presentation
fileStats   = exportToPPTX('query');

if ~isempty(fileStats),
    fprintf('Presentation size: %f x %f\n',fileStats.dimensions);
    fprintf('Number of slides: %d\n',fileStats.numSlides);
end


%% Save presentation and close presentation -- overwrite file if it already exists
% Filename automatically checked for proper extension
newFile = exportToPPTX('saveandclose','example');

% Alternatively you can:
% exportToPPTX('save','example');
% exportToPPTX('close');


%% Open presentation again
exportToPPTX('open','example');


%% Add multiple images in different input formats with custom sizes
exportToPPTX('addslide');

% Upper left corner picture with a blue frame inserted via figure handle
load earth; figure('Renderer','zbuffer'); image(X); colormap(map); axis off;
exportToPPTX('addpicture',gcf,'Position',[1 1 3 2],'EdgeColor',[0 0 0.8],'LineWidth',3);
exportToPPTX('addtext','Inserted via figure handle','Position',[1 0.5 3 0.5],'Vert','bottom');
close(gcf);

% Upper right corner picture with white background inserted via axes handle
load mandrill; figure('Renderer','zbuffer','Color','w'); image(X); colormap(map); axis off;
exportToPPTX('addpicture',gca,'Position',[6 1 3 2]);
exportToPPTX('addtext','Inserted via axes handle','Position',[6 0.5 3 0.5],'Vert','bottom');
close(gcf);

% Add note to the slide
exportToPPTX('addnote','Testing multiple images placement on a single slide.');
exportToPPTX('addnote','Repeated calls on the same slide overwrite existing comments.','FontWeight','bold');

% Lower left corner picture inserted via image CDATA
rgb = imread('ngc6543a.jpg'); figure('Renderer','zbuffer'); image(rgb); axis off;
img     = getframe(gcf);
exportToPPTX('addpicture',img.cdata,'Position',[1 3.5 3 2]);
exportToPPTX('addtext','Inserted via image CDATA','Position',[1 3 3 0.5],'Vert','bottom');
close(gcf);

% Lower right corner picture inserted via image filename
load penny; figure('Renderer','zbuffer'); pcolor(P); shading flat; colormap(copper); axis off;
img     = getframe(gcf);
imwrite(img.cdata,'temp.jpg');
exportToPPTX('addpicture','temp.jpg','Position',[6 3.5 4 2]);
exportToPPTX('addtext','Inserted via filename, no aspect ratio','Position',[6 3 3 0.5],'Vert','bottom');
delete('temp.jpg');
close(gcf);


%% Add image that takes up as much of the slide as possible without losing its aspect ratio
load mandrill; figure('color','w'); image(X); colormap(map); axis off; axis image;

exportToPPTX('addslide');
exportToPPTX('addpicture',gcf,'Scale','maxfixed');
exportToPPTX('addtext','Scale = maxfixed');

exportToPPTX('addslide');
exportToPPTX('addpicture',gcf,'Scale','max');
exportToPPTX('addtext','Scale = max');

close(gcf);


%% Add image in a vector (non-raster) format
figure, plot(rand(10,10),'-b.'); grid on; xlabel('Random'); ylabel('Random');
saveas(gcf,'vectorFile','eps');

exportToPPTX('addslide');
exportToPPTX('addpicture','vectorFile.eps');
close(gcf);

% Add this image again to make sure supported image types are only added
% once
exportToPPTX('addslide');
exportToPPTX('addpicture','vectorFile.eps');

delete('vectorFile.eps');


%% Add multiple text boxes with custom sizes and formatting
exportToPPTX('addslide');
exportToPPTX('addtext','Red Left-top', ...
    'Position',[0 0 4 2], ...
    'Color','r');
exportToPPTX('addtext','Green Center-top', ...
    'Position',[4 0 4 2], ...
    'HorizontalAlignment','center', ...
    'Color','g');
exportToPPTX('addtext','Right-top and bold italics', ...
    'Position',[8 0 4 2], ...
    'HorizontalAlignment','right', ...
    'FontWeight','bold', ...
    'FontAngle','italic');
exportToPPTX('addtext','Soft Blue Left-middle', ...
    'Position',[0 2 4 2], ...
    'VerticalAlignment','middle', ...
    'Color',[0.58 0.70 0.84]);
exportToPPTX('addtext',sprintf('Center-middle and bold on light red background\nWith Multiple\nLines'), ...
    'Position',[4 2 4 2], ...
    'VerticalAlignment','middle', ...
    'HorizontalAlignment','center', ...
    'FontWeight','bold', ...
    'BackgroundColor','c', ...
    'LineWidth',2);
exportToPPTX('addtext','Right-middle', ...
    'Position',[8 2 4 2], ...
    'VerticalAlignment','middle', ...
    'HorizontalAlignment','right', ...
    'EdgeColor','y');
exportToPPTX('addtext','Left-bottom and italics', ...
    'Position',[0 4 4 2], ...
    'VerticalAlignment','bottom', ...
    'HorizontalAlignment','left', ...
    'FontAngle','italic');
exportToPPTX('addtext','Center-bottom size 10', ...
    'Position',[4 4 4 2], ...
    'VerticalAlignment','bottom', ...
    'HorizontalAlignment','center', ...
    'FontSize',10, ...
    'EdgeColor',[0.5 0.5 0.5], ...
    'LineWidth',4);
exportToPPTX('addtext','Right-bottom size 30', ...
    'Position',[8 4 4 2], ...
    'VerticalAlignment','bottom', ...
    'HorizontalAlignment','right', ...
    'FontSize',30);


%% Add one more slide
exportToPPTX('addslide');
exportToPPTX('addtext','Textbox rotated by 45 degrees', ...
    'Position',[3 2.5 6 1], ...
    'VerticalAlignment','middle', ...
    'HorizontalAlignment','center', ...
    'FontSize',30, ...
    'Rotation',45);


%% Add slide with a differently colored background
exportToPPTX('addslide','BackgroundColor',[0 0 1]);
exportToPPTX('addtext','This slide has a blue background', ...
    'Position',[3 2.5 6 1], ...
    'VerticalAlignment','middle', ...
    'HorizontalAlignment','center', ...
    'FontSize',30);


%% Add slide with different XML entities
exportToPPTX('addslide','BackgroundColor','g');
exportToPPTX('addtext',sprintf('Standard XML entities such as \n & and < and > and '' and " \n are properly escaped'), ...
    'VerticalAlignment','middle', ...
    'HorizontalAlignment','center', ...
    'FontSize',15);
exportToPPTX('addnote',sprintf('Standard XML entities such as \n & and < and > and '' and " \n are properly escaped'));
    

%% Add slide with markdown
exportToPPTX('addslide');
exportToPPTX('addtext',sprintf('Numbered items:\n# Each numbered line must start with a "#" symbol\n#Use \\n to start new line\n# Last item is a very, very, very, very, very long one, so that when the text wraps to the new line a proper hanging line can be observed'));

exportToPPTX('addtext', ...
    {'Bulleted items:', ...
    '- Each bulleted line must start with a "-" symbol', ...
    '-Use cell arrays to add multiple lines of text', ...
    '', ...
    '- Last item is a very, very, very, very, very long one, so that when the text wraps to the new line a proper hanging line can be observed'}, ...
    'Position',[0 3 12 3]);

exportToPPTX('addslide');
exportToPPTX('addtext', ...
    {'The following in-text markdown formatting options are supported:', ...
    '- Words can be **bolded** by surrounding them with "**" symbols', ...
    '- Words can be *italicized* using "*"', ...
    '- Words can also be _underlined_ by using "_" symbol', ...
    '- **Various** types of formatting *can be* combined _together_', ...
    '- Variable NAMES_WITH_UNDERSCORES are not underlined', ...
    '- _Markdown_ formatting *can span multiple* words', ...
    sprintf('\t- It can even be tabbed (if using printable \\t sequence)'), ...
    sprintf('\t\t- Further subtabbing is allowed as well')});


%% Add slide out of order
exportToPPTX('addslide','Position',1);
exportToPPTX('addtext','This slide was added last, but inserted into the first position.');


%% Add slide with linked textbox
exportToPPTX('addslide');
exportToPPTX('addtext','Click here to jump to slide #2', ...
    'OnClick',2, ...
    'HorizontalAlignment','center', ...
    'Position',[3 2.5 6 1], ...
    'FontSize',20);


%% Add lines
exportToPPTX('addslide');
xData   = linspace(0,12,101);
yData1  = 3+sin(xData*2)*0.3;
yData2  = 3+cos(xData*2)*0.6;
exportToPPTX('addshape',xData,yData1,'LineWidth',2,'LineStyle',':');
exportToPPTX('addshape',xData,yData2,'LineWidth',4,'LineColor','b');

theta   = linspace(0,2*pi,101);
xData   = sin(theta);
yData   = cos(theta);
exportToPPTX('addshape',xData+4,yData+1,'LineWidth',2,'LineColor','r','LineStyle','--','BackgroundColor','g','ClosedShape',true);
exportToPPTX('addshape',xData+8,yData+1,'LineWidth',0,'LineStyle','--','BackgroundColor','c');


%% Add a table
slideNum = exportToPPTX('addslide');

tableData   = { ...
    'Header 1','Header 2','Header 3'; ...
    'Row 1','Data A','Data B'; ...
    'Row 2',10,20; ...
    'Row 3','Data C','Data D'; ...
    'Row 5',NaN,'N/A'; };

exportToPPTX('addtable',tableData,'Position',[4.5 1 3 4],'Vert','middle','Horiz','center','FontSize',13);


% %% Add movie to the slide
% nFrames = 20;
% 
% % Preallocate movie structure.
% mov(1:nFrames) = struct('cdata',[],'colormap',[]);
% 
% % Create movie
% figure('Renderer','zbuffer');
% Z = peaks; surf(Z); 
% axis tight
% set(gca,'nextplot','replacechildren');
% for k = 1:nFrames 
%    surf(sin(2*pi*k/20)*Z,Z)
%    drawnow;
%    mov(k) = getframe(gcf);
% end
% 
% % Create AVI file.
% movie2avi(mov,'myPeaks.avi','compression','None');
% close(gcf);
% 
% exportToPPTX('addslide');
% exportToPPTX('addpicture','myPeaks.avi');


%% Save again
exportToPPTX('save');


%% Close presentation (and clear all temporary files)
exportToPPTX('close');

fprintf('New file has been saved: <a href="matlab:winopen(''%s'')">%s</a>\n',newFile,newFile);

