% generate the ppt using a template

% make sure that this pptx file exist in the current working folder
options.ppt_template='workload.pptx';

if exist('name','var')
    options.ppt_name=[name, '.pptx'];
else
    options.ppt_name='trace_report.pptx';
end

isOpen  = exportToPPTX();
if ~isempty(isOpen),
    % If PowerPoint already started, then close first and then open a new one
    exportToPPTX('close');
end

[aa]=size(lists_action,1);


exportToPPTX('open',options.ppt_template);

%% See all available masters and layout templates
% You can programmatically access master/layout information
% You can also run exportToPPTX by itself to have this information printed
% to command window
pptxInfo    = exportToPPTX;
fprintf('All available layout templates:\n');
for ilayout=1:numel(pptxInfo.master(1).layout)
    fprintf('\t%d. %s\n',ilayout,pptxInfo.master(1).layout(ilayout).name);
end

%%generate title page
exportToPPTX('addslide','Layout','Blank_Title_Slide');
exportToPPTX('addtext','Workload Analysis','Position','Title');
exportToPPTX('addtext',date,'Position','Text_1');
exportToPPTX('addtext','Auto-Generated by MBPA ','Position','Text_2');
exportToPPTX('addtext','A2CA WDLabs (contact jun.xu99@gmail.com for tech support)','Position','Text_3');


%% generate outline page
exportToPPTX('addslide','Layout','Content_Slide');
exportToPPTX('addtext','Outline','Position','Title');
exportToPPTX('addtext',...
    {'Executive Summary', ...
    'Analysis Results', ...
    'Matlab Parser and Analyzer: Methods & Definition'}, ...
    'Position','Text_main', 'FontSize', 20);
% exportToPPTX('addtext','Workload Summary','Position','Text_up');

%% generate summary page 1
exportToPPTX('addslide','Layout','Content_Slide');
exportToPPTX('addtext','Summary of Trace Properties ','Position','Title');

temp_str1='Read vs write ';
if (basic_info.cmd_num_read>basic_info.cmd_num_write) && (basic_info.total_size_read>basic_info.total_size_write)
    temp_str11='Dominiated read requests';
elseif (basic_info.cmd_num_read<basic_info.cmd_num_write) && (basic_info.total_size_read<basic_info.total_size_write)
    temp_str11='Dominiated write requests';
else
    temp_str11='No dominated access';
end

temp_str12=['R/W: cmd 1:', num2str(basic_info.cmd_num_write/basic_info.cmd_num_read), '; blks 1:', num2str(basic_info.total_size_write/basic_info.total_size_read)];

% check sequence and randomness
options.seek=[0.1,0.2,0.5,0.8];
options.seek_delta=[0.01,0.1,0.2];

temp_str2='Sequence vs Randomness';
temp_str21=check_sequence(seek_dist_record.seek_all, seek_dist_record.queue_len_setting,options);
temp_str21=['Overall- ' temp_str21];

temp_str22=check_sequence(seek_dist_record.seek_write_only, seek_dist_record.queue_len_setting,options);
temp_str22=['Write- ' temp_str22];

temp_str23=check_sequence(seek_dist_record.seek_read_only, seek_dist_record.queue_len_setting,options);
temp_str23=['Read- ' temp_str23];

% combine the content
%     content={temp_str1,['- ' temp_str11], ['- ' temp_str12],...
%         temp_str2,['- ' temp_str21], ['- ' temp_str22],['- ' temp_str23],...
%         temp_str3,['- ' temp_str31], ['- ' temp_str32]};
content={temp_str1, sprintf('\t- %s', temp_str11), sprintf('\t- %s', temp_str12),...
    temp_str2,sprintf('\t- %s', temp_str21), sprintf('\t- %s', temp_str22),sprintf('\t- %s', temp_str23)};

exportToPPTX('addtext', content, 'Position','Text_main', 'Font', 14);
% exportToPPTX('addtext','Workload Summary','Position','Text_up');

%% generate summary page 2
exportToPPTX('addslide','Layout','Content_Slide');
exportToPPTX('addtext','Summary of Trace Properties (cont) ','Position','Title');
% check write update
temp_str1='Write Update';
[a1]=size(time_wow_record.hit_ratio,1);
temp_str11=['Update blk ratio: freq ', num2str(1-freq_wow_record.freq_cdf(1)), '& timed ',  num2str(time_wow_record.update_ratio(a1)/time_wow_record.write_ratio(a1))];
temp_str12=['Update cmd ratio: freq ', num2str(1-freq_wow_record.c_freq_cdf(1)), '& timed ',num2str(time_wow_record.hit_ratio(a1)/time_wow_record.write_cmd_ratio(a1))];

% check WORM /ROW
% check idle time
temp_str2='Idle time';
idx=idle_queue_record.idle_time_array(:,2)>0.1;
temp_str21=['Total effective idle time (>0.1ms)=', num2str(sum(idle_queue_record.idle_time_array(idx,2))),'; Total idle time=', num2str(sum(idle_queue_record.idle_time_array(:,2)))];
temp_str22=['Total effective idle frequency (>0.1ms)=',int2str(size(idx,1)), '; Total idle frequency =' , int2str(size(idle_queue_record.idle_time_array,1))];


content={temp_str1, sprintf('\t- %s', temp_str11), sprintf('\t- %s', temp_str12),...
    temp_str2,sprintf('\t- %s', temp_str21), sprintf('\t- %s', temp_str22)};

exportToPPTX('addtext', content, 'Position','Text_main', 'Font', 14);

%% generate basic information page
exportToPPTX('addslide','Layout','1Table1Text');
exportToPPTX('addtext','Basic Information','Position','Title');
temp_str1='Trace Information';
temp_str11=['Maximum time = ', num2str(lists_action(aa,1)), '; effective time = ', num2str(lists_action(aa,1)-lists_action(1,1))];
temp_str2='Basic Statistics';

content={temp_str1, sprintf('\t- %s', temp_str11), ...
    temp_str2};

exportToPPTX('addtext', content, 'Position','Text_main', 'Font', 14);

tableData   = { ...
    'Metrics','Combined','Read','Write' ; ...
    'Cmd number',basic_info.cmd_num_read+basic_info.cmd_num_write,basic_info.cmd_num_read,basic_info.cmd_num_write; ...
    'Total blk size',basic_info.total_size_read+basic_info.total_size_write,basic_info.total_size_read,basic_info.total_size_write; ...
    'Average blk size',(basic_info.total_size_read+basic_info.total_size_write)/(basic_info.cmd_num_read+basic_info.cmd_num_write),basic_info.ave_size_read,basic_info.ave_size_write;...
    'Average IOPS',basic_info.iops_read+basic_info.iops_write,basic_info.iops_read,basic_info.iops_write;...
    'Average TP (MBps)', basic_info.ave_tp_read+basic_info.ave_tp_write,basic_info.ave_tp_read,basic_info.ave_tp_write};

exportToPPTX('addtable',tableData,'Position','Table_main','Vert','middle','Horiz','center','Font',14);

%% generate LBA distribution
% 	Layout #5: 1Figure1Text (Title 1, Footer Placeholder 2, Picture_main, Text_main)
exportToPPTX('addslide','Layout','1Figure1Text');
exportToPPTX('addtext','Request LBA Distribution','Position','Title');
exportToPPTX('addtext','Basic Properties','Position','Text_sup');
h1 = hgload('lba_all.fig');
set(gcf, 'color', 'white');
set(gca, 'color', 'none');
exportToPPTX('addpicture',h1,'Position','Picture_main','Scale','maxfixed');
close(h1);
temp_str1='LBA vs Time can show the sequence and access range';
temp_str2='Visually observe if read and write are in the same/similar range';
temp_str3='Use a clustering method to find the access locality range';
content={temp_str1,temp_str2,temp_str3};
exportToPPTX('addtext',content , 'Position','Text_main', 'Font', 14);

%% generate iops
filenames1=dir('iops*.fig');
filenames2=dir('throughput*.fig');
filenames3=dir('reqsize*.fig');
% Layout #11: 3Figure1Text (Title 1, Footer Placeholder 2, Picture_11, Picture_12, Picture_22, Text_main)
a1=size(filenames1,1);
for i=1:a1
    exportToPPTX('addslide','Layout','3Figure1Text');
    exportToPPTX('addtext','Estimated IOPS and Throughput','Position','Title');
    exportToPPTX('addtext','Basic Properties','Position','Text_sup');
    for j=1:3
        eval(['filenames=filenames',int2str(j),';']);
        h = hgload(filenames(i).name);
        set(gcf, 'color', 'white');
        set(gca, 'color', 'none');
        pic_pos=['Picture_' int2str(j)];
        exportToPPTX('addpicture',h,'Position',pic_pos,'Scale','maxfixed');
        close(h);
    end
    temp_str1='Observe if burst and idleness exist';
    temp_str2='Bursts exist if there are peaks much higher than the average';
    temp_str3='Idleness exist if there are troughs much lower than the average';
    content={temp_str1,temp_str2,temp_str3};
    exportToPPTX('addtext',content , 'Position','Text_main', 'Font', 14);

end

%% generate size distribution
filenames={'size_dist_Combined.fig','size_dist_write.fig','size_dist_read.fig'};
exportToPPTX('addslide','Layout','3Figure1Text');
exportToPPTX('addtext','Size Distribution','Position','Title');
exportToPPTX('addtext','Basic Properties','Position','Text_sup');
for j=1:3
    h = hgload(filenames{j});
    set(gcf, 'color', 'white');
    set(gca, 'color', 'none');
    pic_pos=['Picture_' int2str(j)];
    exportToPPTX('addpicture',h,'Position',pic_pos,'Scale','maxfixed');
    close(h);
end
temp_str1='Observe the large-size requests for sequence and small-size requests for randomness';
temp_str2='The more large-size requests, the more sequetial in a sense ';
content={temp_str1,temp_str2};
exportToPPTX('addtext',content , 'Position','Text_main', 'Font', 14);

%% generate size distribution
req_size_dist=req_size_record.req_size_dist;
req_size_cdf=req_size_record.req_size_cdf;
a0=size(req_size_cdf,1);
for i=1:3
    req_size_cdf(:,i)=req_size_cdf(:,i)/req_size_cdf(a0,i);
end

exportToPPTX('addslide','Layout','2TableOnly');
exportToPPTX('addtext','Size Distribution (cont)','Position','Title');
exportToPPTX('addtext','Basic Properties','Position','Text_sup');
%   req_size_dist: request size distribution for " total, write, read"
[va_t,idx_t]=sort(req_size_dist(:,1),'descend');
[va_w,idx_w]=sort(req_size_dist(:,2),'descend');
[va_r,idx_r]=sort(req_size_dist(:,3),'descend');
table_content=cell([7 6]);
table_content{1,1}='Top 5 Freq';
for j=1:5
    table_content{1,j+1}=int2str(j);
end
for i=1:3
    if i==1
        va=va_t; idx=idx_t;
        table_content{i*2,1}='Comb size';
        table_content{i*2+1,1}='Comb freq';
    elseif i==2
        va=va_w; idx=idx_w;
        table_content{i*2,1}='Write size';
        table_content{i*2+1,1}='Write freq';
    else
        va=va_r; idx=idx_r;
        table_content{i*2,1}='Read size';
        table_content{i*2+1,1}='Read freq';
    end
    for j=1:5
        table_content{i*2,j+1}=int2str(idx(j));
        table_content{i*2+1,j+1}=int2str(va(j));
    end
end
exportToPPTX('addtable',table_content,'Position','Table1','Vert','middle','Horiz','center','Font',12);

% table 2
size_set=2.^(3:10); a0=size(size_set,2);
table_content=cell([8 a0+1]);
table_content{1,1}='Ratio >=size';
table_content{2,1}='Comb';
table_content{3,1}='Write';
table_content{4,1}='Read';
table_content{5,1}='Ratio <=size';
table_content{6,1}='Comb';
table_content{7,1}='Write';
table_content{8,1}='Read';

for j=1:a0
    table_content{1,j+1}=['>=' int2str(size_set(j))];
    table_content{5,j+1}=['<=' int2str(size_set(j))];
end

for i=1:3
    for j=1:a0
        table_content{i+1,j+1}=num2str(1-req_size_cdf(size_set(j)-1,i),'%.3f');
        table_content{i+5,j+1}=num2str(req_size_cdf(size_set(j),i),'%.3f');
    end
end
exportToPPTX('addtable',table_content,'Position','Table2','Vert','middle','Horiz','center','Font',14);

%% generate LBA-size distribution
filenames={'lba_size_freq_com.fig','lba_size_freq_write.fig','lba_size_freq_read.fig'};
exportToPPTX('addslide','Layout','3Figure1Text');
exportToPPTX('addtext','LBA-Size Distribution','Position','Title');
exportToPPTX('addtext','Basic Properties','Position','Text_sup');
for j=1:3
    h = hgload(filenames{j});
    set(gcf, 'color', 'white');
    set(gca, 'color', 'none');
    pic_pos=['Picture_' int2str(j)];
    exportToPPTX('addpicture',h,'Position',pic_pos,'Scale','maxfixed');
    close(h);
end
temp_str1='Observe the additional LBA information for sequence/randomness distribition';
temp_str2='The more large-size requests and the more narrow LBA range, the more sequetial in a sense ';
temp_str3='Provide more information than "size vs frequency" curve, but difficult to observe';
content={temp_str1,temp_str2, temp_str3};
exportToPPTX('addtext',content , 'Position','Text_main', 'Font', 14);


%% generate Queued next seek distance distribution
filenames={'sk_mode.fig','sk_mean.fig','sk_abs_mean.fig','sk_max.fig'};
exportToPPTX('addslide','Layout','4FigureOnly');
exportToPPTX('addtext','Queued Next Seek Distance','Position','Title');
exportToPPTX('addtext','Advanced Properties','Position','Text_sup');
for j=1:4
    h = hgload(filenames{j});
    set(gcf, 'color', 'white');
    set(gca, 'color', 'none');
    pic_pos=['Picture_' int2str(j)];
    exportToPPTX('addpicture',h,'Position',pic_pos,'Scale','maxfixed');
    close(h);
end

%% generate Queued next seek distance distribution (cont)
exportToPPTX('addslide','Layout','Content_Slide');
exportToPPTX('addtext','Queued Next Seek Distance (cont)','Position','Title');
exportToPPTX('addtext','Advanced Properties','Position','Text_up');

options.seek=[0.1,0.2,0.5,0.8];
options.seek_delta=[0.01,0.1,0.2];

temp_str1='Observe the mode value vs ratio; when value is zero, the higher the ratio, the more sequential the workload';
temp_str3='Observe if seek distance drop quickly wrt queue length; if so, the stream is mixed and cache plays important role';

temp_str2='Sequence vs Randomness';
temp_str21=check_sequence(seek_dist_record.seek_all, seek_dist_record.queue_len_setting,options);
temp_str21=['Overall- ' temp_str21];

temp_str22=check_sequence(seek_dist_record.seek_write_only, seek_dist_record.queue_len_setting,options);
temp_str22=['Write- ' temp_str22];

temp_str23=check_sequence(seek_dist_record.seek_read_only, seek_dist_record.queue_len_setting,options);
temp_str23=['Read- ' temp_str23];

% combine the content
%     content={temp_str1,['- ' temp_str11], ['- ' temp_str12],...
%         temp_str2,['- ' temp_str21], ['- ' temp_str22],['- ' temp_str23],...
%         temp_str3,['- ' temp_str31], ['- ' temp_str32]};
content={temp_str1, temp_str3,...
    temp_str2,sprintf('\t- %s', temp_str21), sprintf('\t- %s', temp_str22),sprintf('\t- %s', temp_str23)};

exportToPPTX('addtext', content, 'Position','Text_main', 'Font', 14);

%% generate Sequential CMD Ratio
if isfield(options, 'seq_size_threshold')
    seq_size_threshold=options.seq_size_threshold;
else
    seq_size_threshold=1024;
end

filenames={'seq_cmd_ratio.fig',['seq_cmd_ratio_size_', int2str(seq_size_threshold),'.fig']};
exportToPPTX('addslide','Layout','2Figure1Text');
exportToPPTX('addtext','Sequential CMD Ratio','Position','Title');
exportToPPTX('addtext','Advanced Properties','Position','Text_sup');

for j=1:2
    h = hgload(filenames{j});
    set(gcf, 'color', 'white');
    set(gca, 'color', 'none');
    pic_pos=['Picture_' int2str(j)];
    exportToPPTX('addpicture',h,'Position',pic_pos,'Scale','maxfixed');
    close(h);
end

temp_str1='Observe sequence ratio with or without size constraint';
temp_str11='If the ratio changes sharply wrt queue length, the workload has strong mixed streams, i.e., the cache shall play important role; otherwise, if the curve is flat, there is no or less (mixed) streams';
temp_str12='If the ratio with size contraint is much smaller than the one without, the average stream size is small (default 1024 blocks); ';

content={temp_str1,sprintf('\t- %s', temp_str11), sprintf('\t- %s', temp_str12)};

exportToPPTX('addtext',content, 'Position','Text_main', 'Font', 14);

%% generate Near Sequential CMD Ratio
filenames={'near_seq_cmd_ratio.fig',['near_seq_cmd_ratio_size_', int2str(seq_size_threshold),'.fig']};
exportToPPTX('addslide','Layout','2Figure1Text');
exportToPPTX('addtext','Near Sequential CMD Ratio','Position','Title');
exportToPPTX('addtext','Advanced Properties','Position','Text_sup');
for j=1:2
    h = hgload(filenames{j});
    set(gcf, 'color', 'white');
    set(gca, 'color', 'none');
    pic_pos=['Picture_' int2str(j)];
    exportToPPTX('addpicture',h,'Position',pic_pos,'Scale','maxfixed');
    close(h);
end
temp_str1='Observe near sequence ratio with or without size constraint';
temp_str11='If the ratio changes sharply wrt queue length, the workload has strong mixed streams, i.e., the cache shall play important role; otherwise, if the curve is flat, there is no or less (mixed) streams';
temp_str12='If the ratio with size contraint is much smaller than the one without, the average stream size is small (default 1024 blocks); ';
temp_str2='Compare the surves with or without gap to check the locality ';
content={temp_str1,sprintf('\t- %s', temp_str11), sprintf('\t- %s', temp_str12), temp_str2};
exportToPPTX('addtext',content, 'Position','Text_main', 'Font', 14);

%% generate Frequented Write Update
filenames={'freq_update_c.fig','freq_update_b.fig'};
exportToPPTX('addslide','Layout','2Figure1Text');
exportToPPTX('addtext','Frequented Write Update','Position','Title');
exportToPPTX('addtext','Advanced Properties','Position','Text_sup');
for j=1:2
    h = hgload(filenames{j});
    set(gcf, 'color', 'white');
    set(gca, 'color', 'none');
    pic_pos=['Picture_' int2str(j)];
    exportToPPTX('addpicture',h,'Position',pic_pos,'Scale','maxfixed');
    close(h);
end


a0=size(freq_wow_record.freq_hit,1);
temp_hit=freq_wow_record.freq_hit./double(freq_wow_record.freq_idx)';
amp_ratio=sum(freq_wow_record.freq_hit)/sum(temp_hit);

temp_str1='Observe frequented write update blk & cmd ratio for write amplifcation (WA) & hit frequency for cache';
temp_str11='Higher cmd update ratio than blk ratio usually leads to much higher WA ratio than the mininum ratio; if cmd and blk ratios are close, minimun WA is possible';
temp_str12='High hit frequency usually means the necesity of write cache subject to hit recency';
temp_str2=['Updated blk ratio ', num2str(1-freq_wow_record.freq_cdf(1)), '& Updated cmd ratio: freq ', num2str(1-freq_wow_record.c_freq_cdf(1))];
temp_str3=['The minimun amplification ratio is ' num2str(amp_ratio), ', if only the updated blocks in one request are written to the new places'];

content={temp_str1,sprintf('\t- %s', temp_str11), sprintf('\t- %s', temp_str12), temp_str2, temp_str3};
exportToPPTX('addtext',content , 'Position','Text_main', 'Font', 14);

%% generate Timed Write Update
filenames={'timed_update1.fig','timed_update2.fig'};
exportToPPTX('addslide','Layout','2Figure1Text');
exportToPPTX('addtext','Timed Write Update','Position','Title');
exportToPPTX('addtext','Advanced Properties','Position','Text_sup');
for j=1:2
    h = hgload(filenames{j});
    set(gcf, 'color', 'white');
    set(gca, 'color', 'none');
    pic_pos=['Picture_' int2str(j)];
    exportToPPTX('addpicture',h,'Position',pic_pos,'Scale','maxfixed');
    close(h);
end

[a1]=size(time_wow_record.hit_ratio,1);
temp_str1='Observe timed write update blk & cmd ratio for write amplifcation (WA) & update trend vs time';
temp_str11='Higher cmd update ratio than blk ratio usually leads to much higher WA ratio than the mininum ratio; if cmd and blk ratios are close, minimun WA is possible';
temp_str12='A linear line usually means a relatively steady update trend, i.e., the update is relatively constant for this workload';
temp_str2=['Updated blk ratio ', num2str(time_wow_record.update_ratio(a1)/time_wow_record.write_ratio(a1)), '& Updated cmd ratio: freq ', num2str(time_wow_record.hit_ratio(a1)/time_wow_record.write_cmd_ratio(a1))];
temp_str3=['The minimun amplification ratio is ' num2str(1/(1-time_wow_record.update_ratio(a1)/time_wow_record.write_ratio(a1))), ', if only the updated blocks in one request are written to the new places'];

content={temp_str1,sprintf('\t- %s', temp_str11), sprintf('\t- %s', temp_str12), temp_str2, temp_str3};
exportToPPTX('addtext',content , 'Position','Text_main', 'Font', 14);

%% generate Stack Distance
exportToPPTX('addslide','Layout','1Figure1Text');
exportToPPTX('addtext','Stack Distance (Write)','Position','Title');
exportToPPTX('addtext','Advanced Properties','Position','Text_sup');

h = hgload('stack_dist_write.fig');
set(gcf, 'color', 'white');
set(gca, 'color', 'none');
pic_pos=['Picture_main'];
exportToPPTX('addpicture',h,'Position',pic_pos,'Scale','maxfixed');
close(h);

temp_str1='Observe the peak of frequency/distribution to locate the most possible hit time, and thefore the cache size';

[va_pa,idx_pa]=sort(stack_wow_record.stack_dist_record_partial,'descend');
[va_fu,idx_fu]=sort(stack_wow_record.stack_dist_record_full,'descend');

str1=[];
str2=[];
str3=[];
str4=[];
for i=1:5
    if ~isempty(va_pa)
        str1=[str1,int2str(va_pa(i)),','];
        str3=[str3,int2str(idx_pa(i)),','];
    end
    if ~isempty(va_fu)
        str2=[str2,int2str(va_fu(i)),','];
        str4=[str4,int2str(idx_fu(i)),','];
    end
end

temp_str1='';
temp_str2='';
temp_str3='';
temp_str4='';

if ~isempty(va_pa)
    temp_str2=['The top 5 partial hit frequency are ' str1 ' with stack distance ' str3];
    temp_str4=['The stack distances ' int2str(idx_pa(1)) ' is roughly ' num2str(idx_pa(1)/basic_info.iops_write),  ' seconds' ];

end
if ~isempty(va_fu)
    temp_str3=['The top 5 full hit frequency are ' str2 ' with stack distance ' str4];
    temp_str4=['The stack distances ' int2str(idx_fu(1)) ' is roughly ' num2str(idx_fu(1)/basic_info.iops_write) ' seconds' ];

end
content={temp_str1,temp_str2,temp_str3, temp_str4};
exportToPPTX('addtext',content , 'Position','Text_main', 'Font', 14);


%% generate  Write Hit LBA & Size Dist
filenames={'WU_LBA_dist.fig','WU_size_dist.fig'};
exportToPPTX('addslide','Layout','2Figure1Text');
exportToPPTX('addtext','Write Hit LBA & Size Dist','Position','Title');
exportToPPTX('addtext','Advanced Properties','Position','Text_sup');
for j=1:2
    h = hgload(filenames{j});
    set(gcf, 'color', 'white');
    set(gca, 'color', 'none');
    pic_pos=['Picture_' int2str(j)];
    exportToPPTX('addpicture',h,'Position',pic_pos,'Scale','maxfixed');
    close(h);
end

lba_dist=stack_wow_record.lba_dist;
[va_pa,idx_pa]=sort(lba_dist(:,2),'descend');
[va_fu,idx_fu]=sort(lba_dist(:,1),'descend');
[al,bl]=size(lba_dist);

temp_str1='Observe hit frequency vs size/LBA distribution';
str1='';
str2='';
str3=[];
str4=[];
for i=1:5
    str1=[str1,int2str(va_pa(i)),','];
    if idx_pa(i)==al
        str2=[str2,'[', int2str(lba_dist(idx_pa(i),3)), ',', int2str(lba_dist(idx_pa(i),3)+1024),'),'];
    else
        str2=[str2,'[', int2str(lba_dist(idx_pa(i),3)), ',', int2str(lba_dist(idx_pa(i)+1,3)),'),'];
    end;
    str3=[str3,int2str(va_fu(i)),','];
    if idx_fu(i)==al
        str4=[str4,'[', int2str(lba_dist(idx_fu(i),3)), ',', int2str(lba_dist(idx_fu(i),3)+1024),'),'];
    else
        str4=[str4,'[', int2str(lba_dist(idx_fu(i),3)), ',', int2str(lba_dist(idx_fu(i)+1,3)),'),'];
    end
end

temp_str2=['The top 5 partial hit frequency are ' str1 ' in the LBA range of ' str2];
temp_str3=['The top 5 full hit frequency are ' str3 ' in the LBA range of  ' str4];

size_dist=stack_wow_record.size_dist;
[va_pa,idx_pa]=sort(size_dist(:,2),'descend');
[va_fu,idx_fu]=sort(size_dist(:,1),'descend');

str1='';
str2='';
str3=[];
str4=[];
for i=1:5
    str1=[str1,int2str(va_pa(i)),','];
    str2=[str2, int2str((idx_pa(i))), ','];
    str3=[str3,int2str(va_fu(i)),','];
    str4=[str4, int2str((idx_fu(i))), ','];
end

temp_str4=['The top 5 partial hit frequency are ' str1 ' with the block size ' str3];
temp_str5=['The top 5 full hit frequency are ' str2 ' with the block size  ' str4];

content={temp_str1,temp_str2,temp_str3, temp_str4,temp_str5};
exportToPPTX('addtext',content , 'Position','Text_main', 'Font', 14);



%% generate  Stacked Write Update
filenames={'stacked_update1.fig','stacked_update2.fig'};
exportToPPTX('addslide','Layout','2Figure1Text');
exportToPPTX('addtext','Stacked Write Update  ','Position','Title');
exportToPPTX('addtext','Advanced Properties','Position','Text_sup');
for j=1:2
    h = hgload(filenames{j});
    set(gcf, 'color', 'white');
    set(gca, 'color', 'none');
    pic_pos=['Picture_' int2str(j)];
    exportToPPTX('addpicture',h,'Position',pic_pos,'Scale','maxfixed');
    close(h);
end

% find the stack distance for corresponding persentage
cdf_record_full=stack_wow_record.cdf_record_full;
cdf_record_partial=stack_wow_record.cdf_record_partial;
a1=size(cdf_record_full,1);
a2=size(cdf_record_partial,1);

if a1==a2
    a=a1;
    cdf_record_comb=cdf_record_full;
    cdf_record_comb(:,2:3)=cdf_record_full(:,2:3)+cdf_record_partial(:,2:3);
else
    if (a1>a2)
        a=a1;
        cdf_record_comb=cdf_record_full;
        if (a2>0)

            cdf_record_comb(1:a2,2:3)=cdf_record_full(1:a2,2:3)+cdf_record_partial(1:a2,2:3);
            cdf_record_comb(a2+1:a1,2:3)=cdf_record_full(a2+1:a1,2:3)+[ones(a1-a2,1).*cdf_record_partial(a2,2) ones(a1-a2,1).*cdf_record_partial(a2,3)];
        end
    else
        a=a2;
        cdf_record_comb=cdf_record_partial;
        if (a1>0)
            cdf_record_comb(1:a1,2:3)=cdf_record_full(1:a1,2:3)+cdf_record_partial(1:a1,2:3);
            cdf_record_comb(a1+1:a2,2:3)=[ones(a2-a1,1).*cdf_record_full(a1,2) ones(a2-a1,1).*cdf_record_full(a1,3)]+cdf_record_partial(a1+1:a2,2:3);
        end
        % disp('no record found');
    end
end

hit_set=[0.2,0.4,0.6,0.8,0.9];
a3=size(hit_set,2);

str1='';
str2='';
str3=[];
str4=[];
for i=1:5
    str1=[str1,num2str(hit_set(i)),','];
    if a1~=0
        va_fu=cdf_record_full(a1,2)*hit_set(i);
        idx_fu=find(cdf_record_full(:,2)>=va_fu,1,'first');
        str2=[str2, int2str(idx_fu), ','];
    end
    if a2~=0
        va_pa=cdf_record_partial(a2,2)*hit_set(i);
        idx_pa=find(cdf_record_partial(:,2)>=va_pa,1,'first');
        str3=[str3,int2str(idx_pa),','];
    end
    if a~=0
        va_co=cdf_record_comb(a,2)*hit_set(i);
        idx_co=find(cdf_record_comb(:,2)>=va_co,1,'first');
        str4=[str4, int2str(idx_co), ','];
        str5=[str4, int2str(idx_co*basic_info.ave_size_write), ','];
    end
end

temp_str1='Observe reasonable distance range for cache allocation';
temp_str2=['The CDF rates of ' str1 ' are achieved at stack distance of ' ];
temp_str21=[str2 ' for full hit'];
temp_str22=[str3 ' for partial hit'];
temp_str23=[str4, 'for combined hit'];
temp_str3=['To achieve the combined CDF rates of ' str1 ' at least ' str5 ' blocks of write cache are required in ideal situations, respectively'];
content={temp_str1,temp_str2, sprintf('\t- %s', temp_str21), sprintf('\t- %s', temp_str22), sprintf('\t- %s', temp_str23),temp_str3};

exportToPPTX('addtext',content , 'Position','Text_main', 'Font', 14);


%% generate  Idle time
filenames={'est_dev_cdf_idle_time.fig','est_dev_cdf_idle_time_f.fig','est_dev_idle_time'};
exportToPPTX('addslide','Layout','3Figure1Text');
exportToPPTX('addtext','Idle Time  ','Position','Title');
exportToPPTX('addtext','Advanced Properties','Position','Text_sup');
for j=1:3
    h = hgload(filenames{j});
    set(gcf, 'color', 'white');
    set(gca, 'color', 'none');
    pic_pos=['Picture_' int2str(j)];
    exportToPPTX('addpicture',h,'Position',pic_pos,'Scale','maxfixed');
    close(h);
end

temp_str1='Observe whether the (effective)idle time is enough for background activities';
temp_str2=['Total effective time=', num2str(lists_action(aa,2)-lists_action(1,1)),'; maximum time=', num2str(lists_action(aa,2))];
idx=find(idle_queue_record.idle_time_array(:,2)>0.1);
temp_str3=['Total effective idle time (>0.1ms)=', num2str(sum(idle_queue_record.idle_time_array(idx,2))),'; Total idle time=', num2str(sum(idle_queue_record.idle_time_array(:,2)))];
temp_str4=['Total effective idle frequency (>0.1ms)=',int2str(size(idx,1)), '; Total idle frequency =' , int2str(size(idle_queue_record.idle_time_array,1))];
content={temp_str1, temp_str2, temp_str3, temp_str4};
exportToPPTX('addtext',content , 'Position','Text_main', 'Font', 14);


%% Save As this presentation
newFile = exportToPPTX('save',options.ppt_name);

%% Close presentation (and clear all temporary files)
exportToPPTX('close');
fprintf('New file has been saved: <a href="matlab:winopen(''%s'')">%s</a>\n',newFile,newFile);
