# Autogenerated with SMOP 
# from smop.core import *
import numpy as np
from decimal import Decimal
from matplotlib.pylab import plot, xlabel, ylabel, title, legend, figure, hold, savefig, grid,subplots

# sub_size_dist.m

class req_size_record_class:
  def __init__(self, req_size_dist, req_size_cdf):
     self.req_size_dist = req_size_dist
     self.req_size_cdf = req_size_cdf
    
#@function
def sub_size_dist(lists_action,lists_cmd,options):

    # calcuate the size distribution
# inputs
    
    #   lists_action: n samples x 2 array for arrival time and completion time;
#   lists_cmd: n samples x 3 for LBA, size, flags
#   options: control parameters
#       plot_fontsize: the figure's font size
#       time_interval: the time interval for moving average windows
#       plot_figure: >=1: plot the figure; otherwise not
#       save_figure: >=1: save the figures
#       export_report: >=1: export the figure/data into a ppt
#       report_name: report name
#       output_foldername: the output folder name for figures and report
#       offset_time:  some trace is not started from zone. in this case. need to find the starting time of first event.
# outputs
# 
#   req_size_record
#       req_size_dist: request size distribution for " total, write, read"
#       req_size_cdf: request size cdf for " total, write, read"
# contact jun.xu99@gmail.com for questions
    
    if hasattr(options,'plot_fontsize'):
        plot_fontsize=options.plot_fontsize
    else:
        plot_fontsize=10
    
    if hasattr(options,'save_figure'):
        save_figure=options.save_figure
    else:
        save_figure=1

    if hasattr(options, 'plot_figure'):
        plot_figure = options.plot_figure
    else:
        plot_figure = 1
    
    con0=len(lists_action)
    # request size distribution
    req_size_dist=np.zeros((1024,3))
    
    idx_write=np.nonzero(lists_cmd[:,2] == 0) # find starts the index from 1
    idx_read=np.nonzero(lists_cmd[:,2] == 1)
    total_write_num=np.shape(idx_write)[1]
    total_read_num=con0 - total_write_num
    total_num=[con0,total_write_num,total_read_num]
    average_read_size=np.mean(lists_cmd[idx_read,1])
    average_write_size=np.mean(lists_cmd[idx_write,1])
    average_size=np.mean(lists_cmd[:,1])
    
    for i in np.arange(0,1024).reshape(-1):
        idx_size=np.nonzero(lists_cmd[:,1] == i+1)
        if np.shape(idx_size)[1]>0:
            req_size_dist[i,0]=np.shape(idx_size)[1]
        idx_size_write=np.nonzero(lists_cmd[idx_write,1] == i+1)
        if np.shape(idx_size_write)[1]>0:
            req_size_dist[i,1]=np.shape(idx_size_write)[1]
    
    req_size_dist[:,2]=req_size_dist[:,0] - req_size_dist[:,1]
    req_size_cdf=np.zeros((1024,3))
    req_size_cdf[0,:]=req_size_dist[0,:]
    
    for i in np.arange(1,1024).reshape(-1):
        req_size_cdf[i,:]=req_size_cdf[i - 1,:] + req_size_dist[i,:]
    
    strs=(['Combined','Write','Read'])
    emin=0
    emax=10
    
    
    req_size_record=req_size_record_class(req_size_dist,req_size_cdf)
    
    #req_size_record.req_size_dist = copy(req_size_dist)
    #req_size_record.req_size_cdf = copy(req_size_cdf)
    
    if plot_figure == 1:
        for i in np.arange(0,3).reshape(-1):
            idx_zero=np.nonzero(req_size_dist[:,i] == 0)
            req_size_dist[idx_zero,i]=Decimal('nan')
        for i in np.arange(0,3).reshape(-1):
            # haxes,hline1,hline2=plotyy(arange(1,1024),req_size_dist[:,i],arange(1,1024),req_size_cdf[:,i] / total_num[i],nargout=3)
            
            fig, ax1 = subplots()    
            ax1.plot(np.arange(1,1025),req_size_dist[:,i], 'b^')
            ax1.set_xlabel('Size (blocks)')
            # Make the y-axis label, ticks and tick labels match the line color.
            ax1.set_ylabel('Frequency', color='b')
            ax1.tick_params('y', colors='b')
            ax1.set_xscale('log',basex=2)
            ax2 = ax1.twinx()           
            ax2.plot(np.arange(1,1025),req_size_cdf[:,i] / total_num[i], 'r')
            ax2.set_ylabel('CDF', color='r')
            ax2.tick_params('y', colors='r')
            ax1.set_title((strs[i]+' Request Size Distribution'))
            fig.tight_layout()
            savefig(('size_dist_'+strs[i]+'.eps'), format="eps")
            savefig(('size_dist_'+strs[i]+'.jpg'))       

    return req_size_record