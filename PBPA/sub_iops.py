# Autogenerated with SMOP 

from numpy import zeros, nonzero, shape, arange, transpose,ceil,c_, array,add,logical_and
from matplotlib.pylab import plot, xlabel, ylabel, title, legend, figure, hold, savefig, grid 
# from statistics import mode
from scipy.stats import mode 
from scipy import mean, median,std
import operator

class average_record_class:
    def __init__(self,IOPS_ave=None,throuput_ave=None,req_size_ave=None):
       self.IOPS_ave=IOPS_ave
       self.throuput_ave=throuput_ave    
       self.req_size_ave=req_size_ave

def sub_iops(lists_action=None,lists_cmd=None,options=None):

    # [IOPS_ave, throuput_ave,req_size_ave]= sub_iops(lists_action,lists_cmd,options)
# --> average IOPS/throughput/request (read/write/total)
    
    # inputs
#   lists_action: n samples x 2 array for arrival time and completion time;
#   lists_cmd: n samples x 3 for LBA, size, flags
#   options: control parameters
#       plot_fontsize: the figure's font size
#       time_interval: the time interval for moving average windows
#       plot_figure: >=1: plot the figure; otherwise not
#       save_figure: >=1: save the figures
#       export_report: >=1: export the figure/data into a ppt
#       report_name: report name
#       output_foldername: the output folder name for figures and report
#       offset_time:  some trace is not started from zone. in this case. need to find the starting time of first event. 
# outputs
#   average_record: structure 
#      IOPS_ave: average value of IOPS at time_interval
#      throuput_ave: average value of throughput at time_interval
#      req_size_ave: average request size  at time_interval
    
    # contact jun.xu99@gmail.com for questions
    
    con0=shape(lists_action)[0]
    if hasattr(options,'time_interval'):
        time_interval=options.time_interval
    else:
        time_interval=5
    
    if hasattr(options,'offset_time'):
        offset_time=options.offset_time
    else:
        offset_time=0
    
    if hasattr(options,'plot_fontsize'):
        plot_fontsize=options.plot_fontsize
    else:
        plot_fontsize=10
    
    if hasattr(options,'save_figure'):
        save_figure=options.save_figure
    else:
        save_figure=1
        
    if hasattr(options,'plot_figure'):
        plot_figure=options.plot_figure
    else:
        plot_figure=1
        
    if hasattr(options,'output_foldername') and options.plot_figure == 1:
        output_foldername=options.output_foldername
    else:
        output_foldername=''
    
       
    max_time=lists_action[con0-1,0]
    
    max_num=int(ceil((max_time - offset_time) / time_interval))
    time_interval=float(time_interval)
    if max_num < 10:
        print('Warning! the time_interval might be too large; too few points are calcuated.')
    
    IOPS_ave=zeros((max_num,4))
    
    throuput_ave=zeros((max_num,4))
    req_size_ave=zeros((max_num,4))
    
    start_pos=0
    for i in arange(0,max_num).reshape(-1):
        start_time=(i )*time_interval + offset_time
        end_time=(i+1)*time_interval + offset_time
        idx_interval=nonzero(logical_and((lists_action[start_pos:con0+1,1] > start_time),(lists_action[start_pos:con0+1,1] <= end_time)))
        if shape(idx_interval)[1]==0:
            IOPS_ave[i,:]=c_[end_time,0,0,0]
            req_size_ave[i,:]=c_[end_time,0,0,0]
            throuput_ave[i,:]=c_[end_time,0,0,0]
            continue
        #start_pos=idx_interval(size(idx_interval,1));
        a=shape(idx_interval)[1]
        # t3=(ones((1,a))*int(start_pos))
        #idx_interval_ac=tuple(map(sum,zip(idx_interval,  t3)))
        idx_interval_ac=add(idx_interval,start_pos)
        idx_interval_ac=idx_interval_ac.T
        idx_read=nonzero(lists_cmd[idx_interval_ac,2] == 1)
        idx_write=nonzero(lists_cmd[idx_interval_ac,2] == 0)
        size_t=shape(idx_interval)[1]
        size_r=shape(idx_read)[1]
        size_w=shape(idx_write)[1]
        IOPS_ave[i,:]=c_[end_time,size_t / time_interval, size_w / time_interval,size_r / time_interval]
        if size_t > 0:
            rs_t=float(sum(lists_cmd[idx_interval_ac,1])) / size_t
        else:
            rs_t=0
        if size_r > 0:
            rs_r=float(sum(lists_cmd[idx_interval_ac[array(idx_read[0])],1])) / size_r
        else:
            rs_r=0
        if size_w > 0:
            rs_w=float(sum(lists_cmd[idx_interval_ac[array(idx_write[0])],1])) / (size_w)
        else:
            rs_w = 0
        req_size_ave[i,:]=c_[end_time,rs_t,rs_w,rs_r]
        tp_t=sum(lists_cmd[idx_interval_ac,1]) / time_interval
        tp_r=sum(lists_cmd[idx_interval_ac[array(idx_read[0])],1]) / time_interval
        throuput_ave[i,:]=c_[end_time,tp_t,tp_t - tp_r,tp_r]
        #             'disp'
    #         end
    #startpos=idx_interval_ac(size_t);
    
    #     idx=find(IOPS_ave(:,2)==0);
    #     IOPS_ave(idx,2)=NaN;
    
    average_record=average_record_class(IOPS_ave,throuput_ave,req_size_ave)
    #    average_record.IOPS_ave = IOPS_ave.copy()
    #    average_record.throuput_ave = (throuput_ave).copy()
    #    average_record.req_size_ave = (req_size_ave).copy()
    
    if plot_figure==1:
        figure()
        #hold('on')
        p1=plot(IOPS_ave[:,0],IOPS_ave[:,1],'r:')
        p2=plot(IOPS_ave[:,0],IOPS_ave[:,2],'b-')
        p3=plot(IOPS_ave[:,0],IOPS_ave[:,3],'k-.')
        xlabel('time (s)')
        ylabel('IOPS')
        legend(['Combined','Write','Read'])
        title(('Estimated IOPS @'+str(time_interval)+'seconds interval'))
        #set(findall(gcf,'-property','FontSize'),'FontSize',plot_fontsize)
        filename=((output_foldername+'iops_'+str(time_interval)))
        if save_figure:
            savefig((filename+'.eps'))
            savefig((filename+'.png'))
        #     idx=find(throuput_ave(:,2)==0);
    #     throuput_ave(idx,2)=NaN;
        figure()
        #hold('on')
        plot(throuput_ave[:,0],throuput_ave[:,1] / 2048,'r:')
        plot(throuput_ave[:,0],throuput_ave[:,2] / 2048,'b-')
        plot(throuput_ave[:,0],throuput_ave[:,3] / 2048,'k-.')
        xlabel('time (s)')
        ylabel('throuput (MBPS)')
        legend(['Combined','Write','Read'])
        title(('Estimated Average Throughput @'+str(time_interval)+'seconds interval'))
        #set(findall(gcf,'-property','FontSize'),'FontSize',plot_fontsize)
        filename=((output_foldername+'throughput_'+str(time_interval)))
        if save_figure:
            savefig((filename+'.eps'))
            savefig((filename+'.png'))
        #     idx=find(req_size_ave(:,2)==0);
    #     req_size_ave(idx,2)=NaN;
        figure()
        #hold('on')
        plot(req_size_ave[:,0],req_size_ave[:,1] / 2048,'r:')
        plot(req_size_ave[:,0],req_size_ave[:,2] / 2048,'b-')
        plot(req_size_ave[:,0],req_size_ave[:,3] / 2048,'k-.')
        xlabel('time (s)')
        ylabel('MB')
        legend(['Combined','Write','Read'])
        title(('Estimated Average Request Size @'+str(time_interval)+'seconds interval'))
        #set(findall(gcf,'-property','FontSize'),'FontSize',plot_fontsize)
        filename=((output_foldername+'reqsize_'+str(time_interval)))
        if save_figure:
            savefig((filename+'.eps'))
            savefig((filename+'.png'))
            
#    if options.export_report:
#        options.section_name = ('IOPS and Throughput')
#        generate_ppt(options)
#        string0=(('IOPS average (C/W/R) = '+str(mean(IOPS_ave[:,2]))+'  '+num2str(mean(IOPS_ave[:,3]))+' '+num2str(mean(IOPS_ave[:,4]))+char(10)+'Throughput average (C/W/R) = ',num2str(mean(throuput_ave[:,2])),'  ',num2str(mean(throuput_ave[:,3])),'  ',num2str(mean(throuput_ave[:,4])),char(10),'Request Size average (C/W/R) = ',num2str(mean(req_size_ave[:,2])),'  ',num2str(mean(req_size_ave[:,3])),'  ',num2str(mean(req_size_ave[:,4]))))
#        saveppt2(options.report_name,'f',0,'t',string0)
    return average_record